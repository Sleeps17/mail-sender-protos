// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.0
// source: mail-sender/mail-sender.proto

package mail_senderv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailSenderClient is the client API for MailSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailSenderClient interface {
	Send_Mail(ctx context.Context, opts ...grpc.CallOption) (MailSender_Send_MailClient, error)
}

type mailSenderClient struct {
	cc grpc.ClientConnInterface
}

func NewMailSenderClient(cc grpc.ClientConnInterface) MailSenderClient {
	return &mailSenderClient{cc}
}

func (c *mailSenderClient) Send_Mail(ctx context.Context, opts ...grpc.CallOption) (MailSender_Send_MailClient, error) {
	stream, err := c.cc.NewStream(ctx, &MailSender_ServiceDesc.Streams[0], "/mail_sender.MailSender/Send_Mail", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailSenderSend_MailClient{stream}
	return x, nil
}

type MailSender_Send_MailClient interface {
	Send(*SendRequest) error
	Recv() (*SendResponse, error)
	grpc.ClientStream
}

type mailSenderSend_MailClient struct {
	grpc.ClientStream
}

func (x *mailSenderSend_MailClient) Send(m *SendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mailSenderSend_MailClient) Recv() (*SendResponse, error) {
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MailSenderServer is the server API for MailSender service.
// All implementations must embed UnimplementedMailSenderServer
// for forward compatibility
type MailSenderServer interface {
	Send_Mail(MailSender_Send_MailServer) error
	mustEmbedUnimplementedMailSenderServer()
}

// UnimplementedMailSenderServer must be embedded to have forward compatible implementations.
type UnimplementedMailSenderServer struct {
}

func (UnimplementedMailSenderServer) Send_Mail(MailSender_Send_MailServer) error {
	return status.Errorf(codes.Unimplemented, "method Send_Mail not implemented")
}
func (UnimplementedMailSenderServer) mustEmbedUnimplementedMailSenderServer() {}

// UnsafeMailSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailSenderServer will
// result in compilation errors.
type UnsafeMailSenderServer interface {
	mustEmbedUnimplementedMailSenderServer()
}

func RegisterMailSenderServer(s grpc.ServiceRegistrar, srv MailSenderServer) {
	s.RegisterService(&MailSender_ServiceDesc, srv)
}

func _MailSender_Send_Mail_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MailSenderServer).Send_Mail(&mailSenderSend_MailServer{stream})
}

type MailSender_Send_MailServer interface {
	Send(*SendResponse) error
	Recv() (*SendRequest, error)
	grpc.ServerStream
}

type mailSenderSend_MailServer struct {
	grpc.ServerStream
}

func (x *mailSenderSend_MailServer) Send(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mailSenderSend_MailServer) Recv() (*SendRequest, error) {
	m := new(SendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MailSender_ServiceDesc is the grpc.ServiceDesc for MailSender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailSender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mail_sender.MailSender",
	HandlerType: (*MailSenderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send_Mail",
			Handler:       _MailSender_Send_Mail_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mail-sender/mail-sender.proto",
}

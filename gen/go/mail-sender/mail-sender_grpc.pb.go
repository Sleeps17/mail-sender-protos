// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.0
// source: mail-sender/mail-sender.proto

package mailer1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailerClient is the client API for Mailer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailerClient interface {
	Post(ctx context.Context, opts ...grpc.CallOption) (Mailer_PostClient, error)
}

type mailerClient struct {
	cc grpc.ClientConnInterface
}

func NewMailerClient(cc grpc.ClientConnInterface) MailerClient {
	return &mailerClient{cc}
}

func (c *mailerClient) Post(ctx context.Context, opts ...grpc.CallOption) (Mailer_PostClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mailer_ServiceDesc.Streams[0], "/mailer.Mailer/Post", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailerPostClient{stream}
	return x, nil
}

type Mailer_PostClient interface {
	Send(*SendRequest) error
	Recv() (*SendResponse, error)
	grpc.ClientStream
}

type mailerPostClient struct {
	grpc.ClientStream
}

func (x *mailerPostClient) Send(m *SendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mailerPostClient) Recv() (*SendResponse, error) {
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MailerServer is the server API for Mailer service.
// All implementations must embed UnimplementedMailerServer
// for forward compatibility
type MailerServer interface {
	Post(Mailer_PostServer) error
	mustEmbedUnimplementedMailerServer()
}

// UnimplementedMailerServer must be embedded to have forward compatible implementations.
type UnimplementedMailerServer struct {
}

func (UnimplementedMailerServer) Post(Mailer_PostServer) error {
	return status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedMailerServer) mustEmbedUnimplementedMailerServer() {}

// UnsafeMailerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailerServer will
// result in compilation errors.
type UnsafeMailerServer interface {
	mustEmbedUnimplementedMailerServer()
}

func RegisterMailerServer(s grpc.ServiceRegistrar, srv MailerServer) {
	s.RegisterService(&Mailer_ServiceDesc, srv)
}

func _Mailer_Post_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MailerServer).Post(&mailerPostServer{stream})
}

type Mailer_PostServer interface {
	Send(*SendResponse) error
	Recv() (*SendRequest, error)
	grpc.ServerStream
}

type mailerPostServer struct {
	grpc.ServerStream
}

func (x *mailerPostServer) Send(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mailerPostServer) Recv() (*SendRequest, error) {
	m := new(SendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Mailer_ServiceDesc is the grpc.ServiceDesc for Mailer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mailer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mailer.Mailer",
	HandlerType: (*MailerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Post",
			Handler:       _Mailer_Post_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mail-sender/mail-sender.proto",
}
